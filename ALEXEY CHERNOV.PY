#aiogram –≤–µ—Ä—Å–∏—è –¥–ª 2.5
import datetime
import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ



# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot_token = 'TOKEN'
bot = Bot(token=bot_token)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥–∞—á–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
class GeolocationState(StatesGroup):
    waiting_for_location = State()
    waiting_for_photo = State()
    waiting_for_question_answer = State()

#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ start
@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    buttons = [
        types.KeyboardButton('üê¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ üê¨'),
        types.KeyboardButton('üê¨ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üê¨'),
        types.KeyboardButton('üê¨ –ü–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üê¨')
    ]
    keyboard.add(*buttons)
    await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n üê¨üê¨üê¨ –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –¥–µ–ª—å—Ñ–∏–Ω–∞–º –Ω–∞ –±–µ—Ä–µ–≥—É –ß–µ—Ä–Ω–æ–≥–æ –º–æ—Ä—è –∏ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—É—é –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.', reply_markup=keyboard)

#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö–æ–Ω—Ç–∞–∫—Ç—ã"
@dp.message_handler(lambda message: message.text == 'üê¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ üê¨')
async def contacts(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(back_button)
    await message.answer('–ï—Å–ª–∏ –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –≤–æ–ª–æ–Ω—Ç–µ—Ä–∞–º–∏, –≤—ã–±–µ—Ä–µ—Ç–µ –æ–¥–∏–Ω –∏–∑ —Å–ø–æ—Å–æ–±–æ–≤: \n –¶–µ–Ω—Ç—Ä 1: \n e-mail: acher3442@gmail.com \n –Ω–æ–º–µ—Ä —Ç–µ–ª.: [+79991234567] \n –¶–µ–Ω—Ç—Ä 2: \n e-mail: acher3442@gmail.com \n –Ω–æ–º–µ—Ä —Ç–µ–ª.: [+79991234567]', reply_markup=keyboard)
#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
@dp.message_handler(lambda message: message.text == 'üê¨ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üê¨')
async def get_info(message: types.Message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(back_button)

    await message.answer('–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —Ü–µ–Ω—Ç—Ä–∞ ¬´–î–ï–õ–¨–§–ê¬ª:  https://delfacenter.org/', reply_markup=keyboard)
    await message.answer('–ü–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ –í—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç —Ü–µ–Ω—Ç—Ä–∞ ¬´–ë–ï–ó–ú–Ø–¢–ï–ñ–ù–û–ï –ú–û–†–ï¬ª: https://serenesea.org/', reply_markup=keyboard)
#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"
@dp.message_handler(lambda message: message.text == 'üê¨ –ü–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üê¨')
async def send_info(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    geolocation_button = types.KeyboardButton('üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
    photo_button = types.KeyboardButton('üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ')
    questions_button = types.KeyboardButton('üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(geolocation_button, photo_button, questions_button, back_button)
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–∞—á–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:', reply_markup=keyboard)

#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"
@dp.message_handler(lambda message: message.text == 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ')
async def send_geolocation(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(back_button)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –∏–∫–æ–Ω–∫—É —Å–∫—Ä–µ–ø–∫–∏ üìé –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –º–µ–Ω—é –ø—É–Ω–∫—Ç—ã ¬´–ì–µ–æ–ø–æ–∑–∏—Ü–∏—è¬ª –∏–ª–∏ ¬´–ú–µ—Å—Ç–æ¬ª üìç', reply_markup=keyboard)
    await GeolocationState.waiting_for_location.set()

#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
@dp.message_handler(content_types=['location'], state=GeolocationState.waiting_for_location)
async def handle_location(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(back_button)
    latitude = message.location.latitude
    longitude = message.location.longitude
    # –ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É excel
    time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data = [time, message.from_user.username, latitude, longitude, '', '', '', '']
    save_to_excel(data)

    await message.answer('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–∞!', reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
    await bot.send_message(chat_id=message.chat.id, text="/start")
#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–µ—Ä–µ–¥–∞—Ç—å —Ñ–æ—Ç–æ"
@dp.message_handler(lambda message: message.text == 'üìé –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ')
async def send_photo(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(back_button)
    await message.answer('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:', reply_markup=keyboard)
    await GeolocationState.waiting_for_photo.set()

#–ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
@dp.message_handler(content_types=['photo'], state=GeolocationState.waiting_for_photo)
async def handle_photo(message: types.Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫
    timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
    photo_dir = 'photos'
    if not os.path.exists(photo_dir):
        os.makedirs(photo_dir)
    photo_file = f'{photo_dir}/{timestamp}.jpg'
    await message.photo[-1].download(photo_file)
    # –ë–æ—Ç —Å–¥–µ–ª–∞–Ω –ê–ª–µ–∫—Å–µ–µ–º –ß–µ—Ä–Ω–æ–≤—ã–º –ú–ë–û–£ –¢–≠–õ
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É excel
    time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    data = [time, message.from_user.username, '', '', photo_file, '', '', '']
    save_to_excel(data)

    await message.answer('–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())
    await state.finish()
    await bot.send_message(chat_id=message.chat.id, text="/start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã"
@dp.message_handler(lambda message: message.text == 'üìù –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é')
async def answer_questions(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=3, resize_keyboard=True)
    yes_button = types.KeyboardButton('–î–∞')
    no_button = types.KeyboardButton('–ù–µ—Ç')
    unsure_button = types.KeyboardButton('–ù–µ –∑–Ω–∞—é')
    back_button = types.KeyboardButton('–ù–∞–∑–∞–¥')
    keyboard.add(yes_button, no_button, unsure_button, back_button)

    await message.answer('–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:', reply_markup=keyboard)
    await GeolocationState.waiting_for_question_answer.set()
    await message.answer('–ï—Å—Ç—å –ª–∏ —É –∂–∏–≤–æ—Ç–Ω–æ–≥–æ –¥—ã—Ö–∞–Ω–∏–µ?')


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
@dp.message_handler(lambda message: message.text in ['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é'], state=GeolocationState.waiting_for_question_answer)
async def handle_question_answer(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        if not data.get('question1'):
            data['question1'] = message.text
            await message.answer('–î–≤–∏–≥–∞–µ—Ç –ª–∏ –∂–∏–≤–æ—Ç–Ω–æ–µ –≥–ª–∞–∑–∞–º–∏?')
        elif not data.get('question2'):
            data['question2'] = message.text
            await message.answer('–ñ–∏–≤–æ—Ç–Ω–æ–µ –¥–≤–∏–∂–µ—Ç—Å—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ?')
        else:
            data['question3'] = message.text

            # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É excel
            time = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            user = message.from_user.username
            latitude = data.get('latitude', '')
            longitude = data.get('longitude', '')
            photo_file = data.get('photo_file', '')
            question1 = 1 if data.get('question1') == '–î–∞' else -1 if data.get('question1') == '–ù–µ—Ç' else 0
            question2 = 1 if data.get('question2') == '–î–∞' else -1 if data.get('question2') == '–ù–µ—Ç' else 0
            question3 = 1 if data.get('question3') == '–î–∞' else -1 if data.get('question3') == '–ù–µ—Ç' else 0

            save_to_excel([time, user, latitude, longitude, photo_file, question1, question2, question3])

            await message.answer('–û—Ç–≤–µ—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω—ã!', reply_markup=types.ReplyKeyboardRemove())
            await state.finish()
            await bot.send_message(chat_id=message.chat.id, text="/start")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.message_handler(lambda message: message.text == '–ù–∞–∑–∞–¥')
async def back(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    buttons = [
        types.KeyboardButton('üê¨ –ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏ üê¨'),
        types.KeyboardButton('üê¨ –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üê¨'),
        types.KeyboardButton('üê¨ –ü–µ—Ä–µ–¥–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é üê¨')
    ]
    keyboard.add(*buttons)
    await message.answer(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! \n üê¨üê¨üê¨ –≠—Ç–æ—Ç —Å–µ—Ä–≤–∏—Å —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –¥–µ–ª—å—Ñ–∏–Ω–∞–º –Ω–∞ –±–µ—Ä–µ–≥—É –ß–µ—Ä–Ω–æ–≥–æ –º–æ—Ä—è –∏ —Å–±–æ—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n–í—ã–±—Ä–∞–≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –∏–ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—É—é –Ω–∞–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∂–∏–≤–æ—Ç–Ω–æ–≥–æ.',
        reply_markup=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É Excel
def save_to_excel(data):
    import openpyxl
    excel_file = 'data.xlsx'

    if not os.path.exists(excel_file):
        wb = openpyxl.Workbook()
        ws = wb.active
        headers = ["–í—Ä–µ–º—è", "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "–®–∏—Ä–æ—Ç–∞", "–î–æ–ª–≥–æ—Ç–∞", "–°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ", "–í–æ–ø—Ä–æ—Å 1", "–í–æ–ø—Ä–æ—Å 2", "–í–æ–ø—Ä–æ—Å 3"]
        ws.append(headers)
        wb.save(excel_file)

    wb = openpyxl.load_workbook(excel_file)
    ws = wb.active
    ws.append(data)
    wb.save(excel_file)

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
if __name__ == '__main__':
    loop = asyncio.get_event_loop()
    try:
        loop.run_until_complete(dp.start_polling())
    finally:
        loop.run_until_complete(dp.bot.session.close())
        loop.close()

